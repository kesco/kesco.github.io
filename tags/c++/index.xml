<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Kesco的编码世界</title>
    <link>http://kescoode.com/tags/c&#43;&#43;/index.xml</link>
    <description>Recent content in C&#43;&#43; on Kesco的编码世界</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2017. All rights reserved.</copyright>
    <atom:link href="http://kescoode.com/tags/c&#43;&#43;/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CMake解决动态链接库RPATH错误问题</title>
      <link>http://kescoode.com/cmake-rpath-problem/</link>
      <pubDate>Tue, 05 Jan 2016 18:02:06 +0800</pubDate>
      
      <guid>http://kescoode.com/cmake-rpath-problem/</guid>
      <description>

&lt;p&gt;最近在做C++开发，在MBP上用Cmake构建项目的时候，发现&lt;code&gt;make install&lt;/code&gt;之后生成的执行文件会运行出错：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dyld: Library not loaded: @rpath/libadk.dylib
  Referenced from: /Users/kesco/Documents/workspaces/cpp/apue_practise/build/bin/./thread
  Reason: image not found
[1] 52362 trace trap  ./thread
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提示我，动态链接库(&lt;code&gt;libadk.dylib&lt;/code&gt;也是工程内的一个子项目)找不着。这就奇怪了，因为我&lt;code&gt;make install&lt;/code&gt;安装的时候，是把动态链接库和执行文件都放在同一个目录下的。为啥会找不着呢，而之前在Windows下是没问题的，后来查了下Cmake的文档，原来是Cmake版本的问题=_+。&lt;/p&gt;

&lt;p&gt;如果你的CMakeList.txt上写的&lt;code&gt;cmake_minium_required&lt;/code&gt;为2.6的话，会报下面异常：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;....
CMake Warning (dev):
  Policy CMP0042 is not set: MACOSX_RPATH is enabled by default.  Run &amp;quot;cmake
  --help-policy CMP0042&amp;quot; for policy details.  Use the cmake_policy command to
  set the policy and suppress this warning.
 
  MACOSX_RPATH is not specified for the following targets:
 
   cjson
   iniparser
   stemmer
   word2vec
 
This warning is for project developers.  Use -Wno-dev to suppress it.
 
-- Generating done
....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而在&lt;code&gt;CMP0042&lt;/code&gt;更新，也就是Cmake 2.8.1.2之后，如果你声明的&lt;code&gt;cmake_minium_required&lt;/code&gt;为2.8以上，&lt;code&gt;MACOSX_RPATH&lt;/code&gt;会默认启动，这时候编译的执行文件在查找链接库的时候会往&lt;code&gt;@rpath&lt;/code&gt;上搜索，所以就找不到要链接的库(&lt;code&gt;libadk.dylib&lt;/code&gt;在同一个目录下)。我们可以用&lt;code&gt;otool -L &amp;lt;file&amp;gt;&lt;/code&gt;命令来查看执行文件的链接库依赖。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bin git:master ❯ otool -L thread
thread:
        @rpath/libadk.dylib (compatibility version 0.0.0, current version 0.0.0)
        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;知道原因之后就好办了，我们只需在CMakeList.txt上把&lt;code&gt;MACOSX_RPATH&lt;/code&gt;关掉就好了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;set(CMAKE_MACOSX_RPATH 0)

add_subdirectory(adk)
add_subdirectory(thread)

....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重新用&lt;code&gt;cmake&lt;/code&gt;生成MakeFile构建就不会报错了。不过，&lt;code&gt;RPATH&lt;/code&gt;是啥呢？以前写C++的时候都是在Windows上开着VS来的，没遇到过这样的问题，现在遇到了，自然要查清楚。&lt;/p&gt;

&lt;h2 id=&#34;什么是rpath&#34;&gt;什么是RPATH?&lt;/h2&gt;

&lt;p&gt;在Linux环境下，使用动态链接的程序在运行时会自动链接&lt;code&gt;ld.so&lt;/code&gt;这个库(OS X上是&lt;code&gt;dyld&lt;/code&gt;)，然后通过&lt;code&gt;ld.so&lt;/code&gt;来查找链接其它的库。而&lt;code&gt;RPATH&lt;/code&gt;就是编译的时候链接到执行文件的链接库路径。OS X在&lt;code&gt;RPATH&lt;/code&gt;的设置上和Linux还是有点出入的，OS X的&lt;code&gt;RPATH&lt;/code&gt;采用的是绝对路径。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ld.so&lt;/code&gt;搜索路径的优先级是这样的：&lt;br /&gt;
1. &lt;code&gt;RPATH&lt;/code&gt;，编译链接时加入&lt;code&gt;-rpath&lt;/code&gt;参数指明所谓的&lt;code&gt;RUNPATH&lt;/code&gt;，这样可执行文件（或者依赖其他动态链接库的动态链接库）就能告诉&lt;code&gt;ld.so&lt;/code&gt;到哪里去搜索对应的动态链接库了。
2. &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;，对于没有设定&lt;code&gt;RPATH&lt;/code&gt;的可执行文件或者动态链接库，我们可以用&lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;这个环境变量通知&lt;code&gt;ld.so&lt;/code&gt;往哪里查找链接库。
3. &lt;code&gt;/etc/ld.so.conf&lt;/code&gt;，系统对&lt;code&gt;ld.so&lt;/code&gt;的路径配置文件。
4. &lt;code&gt;/usr/lib&lt;/code&gt;、&lt;code&gt;/lib&lt;/code&gt;和&lt;code&gt;/usr/local/lib&lt;/code&gt;，系统默认路径。&lt;/p&gt;

&lt;h2 id=&#34;cmake和rpath&#34;&gt;Cmake和RPATH&lt;/h2&gt;

&lt;p&gt;在分发程序的时候，执行文件使用的链接库在系统内不一定会有，或者自带了的版本不对，一般都会在程序文件夹内都会附带相应的链接库，所以最好还是把&lt;code&gt;RPATH&lt;/code&gt;加上。Cmake对RPATH提供了很多选项支持，我们一般只关注这几个变量就好了：&lt;code&gt;CMAKE_SKIP_BUILD_RPATH&lt;/code&gt;、&lt;code&gt;CMAKE_BUILD_WITH_INSTALL_RPATH&lt;/code&gt;、&lt;code&gt;CMAKE_INSTALL_RPATH&lt;/code&gt;和&lt;code&gt;CMAKE_INSTALL_RPATH_USE_LINK_PATH&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;默认rpath设置&#34;&gt;默认RPATH设置&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;set(CMAKE_SKIP_BUILD_RPATH FALSE)                 # 编译时加上RPATH
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)         # 编译时RPATH不使用安装的RPATH
set(CMAKE_INSTALL_RPATH &amp;quot;&amp;quot;)                       # 安装RPATH为空
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)      # 安装的执行文件不加上RPATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cmake在默认情况下，&lt;code&gt;make install&lt;/code&gt;会把安装的执行文件的&lt;code&gt;RPATH&lt;/code&gt;删掉的，所以就会出现上面我执行安装好的执行文件报错的问题。&lt;/p&gt;

&lt;h3 id=&#34;加上完整的rpath&#34;&gt;加上完整的RPATH&lt;/h3&gt;

&lt;p&gt;Cmake的默认设置我们肯定是不能使用的，我们需要一个安装的时候也要带上&lt;code&gt;RPATH&lt;/code&gt;的设置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;set(INSTALL_LIB_DIR &amp;quot;${PROJECT_BINARY_DIR}/lib&amp;quot;) # 假设安装目录在编译目录的lib子目录内

set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
set(CMAKE_INSTALL_RPATH &amp;quot;${CMAKE_INSTALL_PREFIX}/lib&amp;quot;)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# 确保链接库不在系统默认安装的目录上时更改到项目lib上
list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES ${CMAKE_INSTALL_RPATH} isSystemDir)
if(&amp;quot;${isSystemDir}&amp;quot; STREQUAL &amp;quot;-1&amp;quot;)
  set(CMAKE_INSTALL_RPATH &amp;quot;${INSTALL_LIB_DIR}&amp;quot;)
endif(&amp;quot;${isSystemDir}&amp;quot; STREQUAL &amp;quot;-1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在Cmake在C++项目上应用得越来越多了，但是Cmake的文档很分散，写Cmake构建脚本的时候会踩上很多坑，只能慢慢积累经验总结。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>