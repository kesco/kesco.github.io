<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Kesco的编码世界</title>
    <link>http://kescoode.com/tags/android/index.xml</link>
    <description>Recent content in Android on Kesco的编码世界</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2017. All rights reserved.</copyright>
    <atom:link href="http://kescoode.com/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>用Travis CI给Android项目部署Github Release</title>
      <link>http://kescoode.com/travis-ci-android-github-release/</link>
      <pubDate>Thu, 15 Oct 2015 14:29:53 +0800</pubDate>
      
      <guid>http://kescoode.com/travis-ci-android-github-release/</guid>
      <description>

&lt;p&gt;时至今日，互联网软件的开发和发布，已经形成了一套标准流程，其中一个重要部分就是持续集成(CI)。&lt;/p&gt;

&lt;p&gt;平时我工作中CI用得比较多的地方是按照git tag做应用渠道分发打包。最近写了一个拖拽手势Xposed插件&lt;a href=&#34;https://github.com/kesco/SlideBack-Xposed&#34;&gt;SlideBack-Xposed&lt;/a&gt;，除了&lt;a href=&#34;http://repo.xposed.info/module/com.kesco.xposed.slideback&#34;&gt;Xposed Module Repo&lt;/a&gt;外，我需要一个提供APK对外下载的地方。由于Google Play审核机制收紧了，单纯Xposed插件收录比较麻烦，而我又不想放到国内渠道上，于是我把注意力放到Github Release上。&lt;/p&gt;

&lt;p&gt;Github Release是Github推出的一个帮助开发者发布Repo最终软件包给用户的功能。Github Release是根据其Repo的Git标签来排序的，而且目前Github还没有限制Github Release的存储大小，不需担心空间不够用，所以一般情况下，已经可以了。同时，我们利用Travis CI来自动根据我们打的Git Tag来构建APK并Push到自己的Github Release上。&lt;/p&gt;

&lt;h2 id=&#34;启用travis-ci&#34;&gt;启用Travis CI&lt;/h2&gt;

&lt;p&gt;Travis CI是比较流行的开源持续构建平台，与Github结合比较紧密，对Github上的开源Repo是免费的，私有Repo收费（Circle CI也不错，而且对Github私有Repo也是免费的）。我们首先在Travis CI上打开对自己项目的Hook开关，那么当你每次Commit Push的时候，CI就会自动运行了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7mnom1.com1.z0.glb.clouddn.com/travis-enable-project.png&#34; alt=&#34;travis-enable-project&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;基础构建脚本&#34;&gt;基础构建脚本&lt;/h2&gt;

&lt;p&gt;Travis CI使用YAML文件作为构建脚本，以最简单Android项目构建APK为例，只需在项目根目录创建&lt;code&gt;.travis.yml&lt;/code&gt;文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: android
android:
  components:
    - build-tools-22.0.1
    - android-23
    - extra-android-m2repository
    - extra-android-support
script:
  - ./gradlew assembleRelease
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后&lt;code&gt;git add . &amp;amp;&amp;amp; git commit &amp;amp;&amp;amp; git push&lt;/code&gt;即可。这里解释下，&lt;code&gt;.travis.yml&lt;/code&gt;几个关键的Tag：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;因为Repo是Android项目，所以构建语言&lt;code&gt;language&lt;/code&gt;选择&lt;code&gt;android&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;选择了Android项目后，就在&lt;code&gt;android&lt;/code&gt;中的&lt;code&gt;components&lt;/code&gt;的tag中设置Android项目需要的依赖。&lt;/li&gt;
&lt;li&gt;Travis CI编译Android实际上也是调用项目中的构建脚本的。现在大部分Android项目都是用Gradle构建的，如果是要打Release版本的APK包，在&lt;code&gt;script&lt;/code&gt;加入&lt;code&gt;./gradlew assembleRelease&lt;/code&gt;就行了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不过，实际上，单纯在CI上面打包，其实是没什么用处的，因为Travis CI每次任务完成之后，就会把所有生成的文件清掉，所以我们要把生成的APK传到Github Release上。&lt;/p&gt;

&lt;h2 id=&#34;发布github-release&#34;&gt;发布Github Release&lt;/h2&gt;

&lt;p&gt;Travis CI默认支持发布到Github Release上，不需要配置别的脚本，相应的&lt;code&gt;YAML&lt;/code&gt;配置Tag是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;deploy:
  provider: releases
  api_key: &amp;quot;GITHUB OAUTH TOKEN&amp;quot;
  file: &amp;quot;FILE TO UPLOAD&amp;quot;
  skip_cleanup: true
  on:
    tags: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;值得注意的一点就是&lt;code&gt;skip_cleanup&lt;/code&gt;这个Tag要设置为&lt;code&gt;True&lt;/code&gt;，不这样做的话，Travis CI在部署之前就会清空生成的APK文件，那样你就什么都得不到了。&lt;code&gt;api_key&lt;/code&gt;是部署到Github Release的凭证，需要开发者自己生成。如果不想那么麻烦的话，可以使用Travis CI提供的&lt;code&gt;travis&lt;/code&gt;命令行工具。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;travis&lt;/code&gt;是用Ruby写的，安装需要系统配有Ruby 1.9以上版本：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install travis -v 1.8.0 --no-rdoc --no-ri
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完成后，在根目录执行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;travis setup releases
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按照相应的提示，就可以生成相应的部署配置了。完整的&lt;code&gt;.travis.yml&lt;/code&gt;文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: android
android:
  components:
    - build-tools-22.0.1
    - android-23
    - extra-android-m2repository
    - extra-android-support
script:
  - ./gradlew assembleRelease
deploy:
  provider: releases
  api_key:
    secure: [生成的token]
  file: app/build/outputs/apk/app-release.apk
  skip_cleanup: true
  on:
    tags: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，以后在你Repo打git tag并把它Push到Github上后，Travis CI就会自动帮你构建一个Github Release了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7mnom1.com1.z0.glb.clouddn.com/slideback-github-release.png&#34; alt=&#34;slideback-github-release&#34; /&gt;&lt;/p&gt;

&lt;p&gt;等等，难道这样就结束了吗？当然不了，这只是单纯把APK发送到Github Release上去。但是构建APK过程中还有很多问题，比如你在CI构建Release版本的APK的时候，要用到自己签名的密钥，对吧。我们当然不能把密钥的信息公开，那么该怎么做呢？&lt;/p&gt;

&lt;h2 id=&#34;隐藏签名密钥信息&#34;&gt;隐藏签名密钥信息&lt;/h2&gt;

&lt;p&gt;Travis CI是通过Android项目中的build.gradle的信息来构建apk的，自然我们通过配置build.gradle脚本来签名apk也是很正常的事。但是在公开项目中暴露签名密钥信息是不安全的，有个简单的方法是，让gradle在CI构建的时候从CI的环境变量中读取密钥信息，这样可以降低点风险。&lt;/p&gt;

&lt;p&gt;首先，我们先在&lt;code&gt;build.gradle&lt;/code&gt;配置签名选项文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;android {
    signingConfigs {
        release {
            storeFile file(&amp;quot;.kesco.keystore&amp;quot;)
            storePassword System.getenv(&amp;quot;KEYSTORE_PASS&amp;quot;)
            keyAlias System.getenv(&amp;quot;ALIAS_NAME&amp;quot;)
            keyPassword System.getenv(&amp;quot;ALIAS_PASS&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;像这样的话，gradle在签名的时候会自动从系统读取&lt;code&gt;KEYSTORE_PASS&lt;/code&gt;、&lt;code&gt;ALIAS_NAME&lt;/code&gt;和&lt;code&gt;ALIAS_PASS&lt;/code&gt;三个环境变量。&lt;/p&gt;

&lt;p&gt;然后我们在Travis CI上设置&lt;code&gt;KEYSTORE_PASS&lt;/code&gt;、&lt;code&gt;ALIAS_NAME&lt;/code&gt;和&lt;code&gt;ALIAS_PASS&lt;/code&gt;这三个环境变量：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7mnom1.com1.z0.glb.clouddn.com/travis-env.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;另外，Travis CI在构建Android项目时，默认使用Oracle JDK，但是当我设置CI的环境变量后，构建会报错，所以就把JDK换为OpenJDK了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jdk: openjdk7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果还想更保密点的话，可以将签名密钥keystore文件加密一下，等CI启动的时候再解密，这样会安全些。&lt;/p&gt;

&lt;p&gt;以上就是我折腾&lt;a href=&#34;https://github.com/kesco/SlideBack-Xposed&#34;&gt;SlideBack-Xposed&lt;/a&gt;项目时总结出来的经验，下面是我项目中完整的&lt;code&gt;.travis.yml&lt;/code&gt;文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: android
jdk: openjdk7
android:
  components:
    - build-tools-22.0.1
    - android-23
    - extra-android-m2repository
    - extra-android-support
git:
  submodules: false
before_install:
  - sed -i &#39;s/git@github.com:/https:\/\/github.com\//&#39; .gitmodules
  - git submodule init &amp;amp;&amp;amp; git submodule update
script:
  - ./gradlew assembleRelease
before_deploy:
  - mv app/build/outputs/apk/app-release.apk app/build/outputs/apk/slideback.apk
deploy:
  provider: releases
  api_key:
    secure: [Github Token]
  file: app/build/outputs/apk/slideback.apk
  skip_cleanup: true
  on:
    tags: true
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>小试RxJava</title>
      <link>http://kescoode.com/try-rxjava/</link>
      <pubDate>Wed, 23 Sep 2015 13:55:08 +0800</pubDate>
      
      <guid>http://kescoode.com/try-rxjava/</guid>
      <description>

&lt;p&gt;RxJava是NetFlix推出的&lt;a href=&#34;http://reactivex.io&#34;&gt;Reactive Extensions&lt;/a&gt;(简写为Rx)框架的Java语言实现。&lt;a href=&#34;http://reactivex.io&#34;&gt;Reactive Extensions&lt;/a&gt;实际是以现在非常火的响应式编程范式的为基础的一种变体，基于响应式编程加入了一些函数式编程的元素在里面。&lt;/p&gt;

&lt;p&gt;Rx系列发展到现在，基本覆盖了所有主流编程语言，包括C#、Java和JavaScript等等。在Android平台上，也有很多出名的公司基于RxJava开发了许多衍生库，并在其App中大量使用，据我了解有：Square(Jake Wharton大神出版的&lt;a href=&#34;https://github.com/JakeWharton/RxBinding&#34;&gt;RxBinding&lt;/a&gt;)、Trello(推出了&lt;a href=&#34;https://github.com/trello/RxLifecycle&#34;&gt;RxLifecycle&lt;/a&gt;)和国内的大众点评。&lt;/p&gt;

&lt;p&gt;在这篇文档，主要是写下RxJava的用法。&lt;/p&gt;

&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;

&lt;p&gt;官方对Rx的表述是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Rx是一个函数库，让开发者可以利用可观察序列和LINQ风格查询操作符来编写异步和基于事件的程序，使用Rx，开发者可以用Observables表示异步数据流，用LINQ操作符查询异步数据流， 用Schedulers参数化异步数据流的并发处理，Rx可以这样定义：Rx = Observables + LINQ + Schedulers。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而Rx的响应式编程概念以我的理解，我觉得可以简单的概括为“观察者模式+管道操作符”，而实际上，RxJava的操作过程就是： &amp;ldquo;Observable -&amp;gt; Operators -&amp;gt; Subscriber&amp;rdquo;。显而易见的，&lt;code&gt;Observable&lt;/code&gt;为模型中的目标对象，&lt;code&gt;Subscriber&lt;/code&gt;为观察者，而&lt;code&gt;Operators&lt;/code&gt;负责目标对象发出的信息给观察者们的分发，也就是管道。其中&lt;code&gt;Operators&lt;/code&gt;是Rx最关键的一部分，&lt;code&gt;Operators&lt;/code&gt;不仅可以分发信息，而且可以对信息数据进行各种处理，甚至可以把信息回馈到另外的目标对象中。这样做，可以完成&lt;code&gt;Subscriber&lt;/code&gt;和&lt;code&gt;Observable&lt;/code&gt;的解耦。&lt;/p&gt;

&lt;h2 id=&#34;使用方法&#34;&gt;使用方法&lt;/h2&gt;

&lt;p&gt;根据上面的表述，RxJava的使用方法非常简单，也就是我们定义好工作目标Observable和观察者Subscriber，然后把他们组合在一起就可以了，如果有必要对中间的流程进行处理，则在中间加入相应的Operators。&lt;/p&gt;

&lt;p&gt;不过，首先我们要在项目中引入RxJava库。&lt;/p&gt;

&lt;h3 id=&#34;在android工程中引入rxjava&#34;&gt;在Android工程中引入RxJava&lt;/h3&gt;

&lt;p&gt;随着ADT停止更新，现在绝大部分Android开发都是使用Android Studio或者Intellij Idea了，这两者都是基于Gradle来构建Android工程的，那么我们可以直接引入RxJava Maven Repo即可在项目中使用RxJava了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {
    compile &#39;io.reactivex:rxjava:1.0.14&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外，虽然RxJava最低支持到Java 6，但是总所周知，Java是个纯面向对象语言，它并没有支持函数式编程，也只有在Java 8的时候，Java 8引入几个函数式编程元素(Lambda表达式、默认方法和函数式引用)。而Rx是个函数式编程框架库，在Java 7之前使用的话，代码看起来会非常别扭，所以最好是在Java 8的环境中使用。不过Android现在官方支持只到Java 7，没支持Java 8，要想在Android中使用Java 8，则必须加入第三方插件。&lt;/p&gt;

&lt;h3 id=&#34;最简单的模式&#34;&gt;最简单的模式&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Observable -&amp;gt; Subscriber&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;是最为简单模型，这里我们假设从接收到的网络请求中获取到一串用户列表，我们要把用户列表显示到页面上，用RxJava可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;User&amp;gt; users; /* 获取到的用户列表 */
UserAdapter adapter; /* 页面Adapter */

/* 中间环节忽略 */

/* 创建observable */
Observable&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; observable = Observable.create(new Observable.OnSubscribe&amp;lt;List&amp;lt;User&amp;gt;&amp;gt;() {
    @Override
    public void call(Subscriber&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; subscriber) {
        subscriber.onNext(users);
        subscriber.onCompleted();
    }
});

/* 创建subscriber */
Subscriber&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; subscriber = new Subscriber&amp;lt;List&amp;lt;User&amp;gt;&amp;gt;() {
    @Override
    public void onCompleted() {
	Log.d(&amp;quot;test&amp;quot;, &amp;quot;completed!&amp;quot;);
    }

    @Override
    public void onError(Throwable e) {
	Log.d(&amp;quot;test&amp;quot;, &amp;quot;error!&amp;quot;);
    }
    @Override
    public void onNext(List&amp;lt;User&amp;gt; args) {
        adapter.setDataSet(args);
    }
};

// 订阅
observable.subscribe(subscriber);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;值得注意的一点就是如果Observable没有被Subscriber订阅的话，Observable的内部代码是不会被执行的，这有个好处就是提供了一个控制手段给我们，来控制何时执行这个事件。&lt;/p&gt;

&lt;p&gt;实际上，这样一个简单的流程，写了这么多行代码，所以RxJava提供了比较简便的方法：&lt;/p&gt;

&lt;p&gt;比如，Observable可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 创建observable
Observable&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; observable = Observable.just(user);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Observable.just()&lt;/code&gt;是RxJava提供的一个语法糖，主要是用简单的传递数据。在RxJava中，共有这几种创建Observable的方法：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;just( )&lt;/code&gt;， 将一个或多个对象转换成发射这个或这些对象的一个Observable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from( )&lt;/code&gt;，将一个Iterable, 一个Future, 或者一个数组转换成一个Observable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repeat( )&lt;/code&gt;， 创建一个重复发射指定数据或数据序列的Observable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repeatWhen( )&lt;/code&gt;，创建一个重复发射指定数据或数据序列的Observable，它依赖于另一个Observable发射的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create( )&lt;/code&gt;，使用一个函数从头创建一个Observable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defer( )&lt;/code&gt;，只有当订阅者订阅才创建Observable；为每个订阅创建一个新的Observable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range( )&lt;/code&gt;，创建一个发射指定范围的整数序列的Observable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interval( )&lt;/code&gt;，创建一个按照给定的时间间隔发射整数序列的Observable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timer( )&lt;/code&gt;，创建一个在给定的延时之后发射单个数据的Observable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;empty( )&lt;/code&gt;，创建一个什么都不做直接通知完成的Observable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error( )&lt;/code&gt;，创建一个什么都不做直接通知错误的Observable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;never( )&lt;/code&gt;，创建一个不发射任何数据的Observable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;方法虽然很多，但是在以页面展示的功能需求中，我们还是只用了这几个方法：&lt;code&gt;create&lt;/code&gt;、&lt;code&gt;repeat&lt;/code&gt;、&lt;code&gt;repeatWhen&lt;/code&gt;和&lt;code&gt;defer&lt;/code&gt;，所以只要掌握这几种用法就可以了，其余的需要的时候才查文档。关于创建Observable的文档在&lt;a href=&#34;http://reactivex.io/documentation/operators.html#creating&#34;&gt;这&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;同样，如果我们不关心subscriber是否结束（onComplete())或者发生错误(onError()),subscriber的代码可以简化为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 创建subscriber
Action1&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; subscriber = new Action1&amp;lt;List&amp;lt;User&amp;gt;&amp;gt;() {
    @Override
    public void call(List&amp;lt;User&amp;gt; args) {
        adapter.setDataSet(args);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们直接把创建和订阅连接起来，完整的代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Observable.just(users).subscribe(new Action1&amp;lt;List&amp;lt;User&amp;gt;&amp;gt;() {
    @Override
    public void call(List&amp;lt;User&amp;gt; args) {
        adapter.setDataSet(args);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样看起来已经更简洁了，但是如果使用Java 8的话，代码会更加好看：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Observable.just(users).subscribe(args -&amp;gt; adapter.setDataSet(args));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;加入operators&#34;&gt;加入Operators&lt;/h3&gt;

&lt;p&gt;很多时候，我们需要针对处理过的事件做出响应，而不仅仅是Observable产生的原始事件。最明显的例子就是网络请求回来的数据往往是JSON数据，我们还要对此进行序列化成相应的业务操作才可以传递给前台，这里就需要引入operator来处理JSON数据。&lt;/p&gt;

&lt;p&gt;所以之前一节的代码实际上缺少解析JSON的部分，完整的步骤应该先获取JSON，再序列化然后传给页面，所以Observable传递的应该为JSON数据，而subscriber接收的却是业务对象，中间必须加入Operator处理序列化，代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Observable.just(json).map(new Func1&amp;lt;JSONObject, List&amp;lt;User&amp;gt;&amp;gt;() {
    @Override
    public String call(JSONObject json) {
        return User.constructionFrom(json);
    }
}).subscribe(args -&amp;gt; adapter.setDataSet(args));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里使用了名为&lt;code&gt;map&lt;/code&gt;operator，它的作用很简单，就是接收一个事件，并返回处理后的事件。Func1的第一个泛型参数表示输入类型，第二个泛型参数表示返回类型。&lt;/p&gt;

&lt;p&gt;同样，使用Java 8的语法会更加简洁：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Observable.just(json)
        .map(json -&amp;gt; User.constructionFrom(json))
        .subscribe(args -&amp;gt; adapter.setDataSet(args));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RxJava中的Operator一共有二十几个，而且自己也可以自定义Operators，这正式RxJava比一般的异步框架优秀的地方，由于自带的Operators数量过多，这里就不一一讲述了，需要的可以查下&lt;a href=&#34;http://reactivex.io/documentation/operators.html&#34;&gt;文档&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;任务订阅&#34;&gt;任务订阅&lt;/h3&gt;

&lt;p&gt;前面缺少了RxJava的一个细节，就是实际上执行Observable.subscribe()时，它会返回一个Subscrition,它代表了Observable和Subscriber之间的关系。我们可以通过Subscrition解除Observable和Subscriber之间的订阅关系，并立即停止执行整个订阅链，比如要取消上述显示用户列表操作，我们可以这样做：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Subscription subscription = Observable.just(json)
        .map(json -&amp;gt; User.constructionFrom(json))
        .subscribe(args -&amp;gt; adapter.setDataSet(args));
subscription.unsubscribe();
Log.d(&amp;quot;test&amp;quot;, &amp;quot;isSubscribed = &amp;quot; + subscription.isUnsubscribed());
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;多线程操作&#34;&gt;多线程操作&lt;/h3&gt;

&lt;p&gt;Android的多线程机制是UI渲染跑在Main Thread上的，也就是说主线程不能阻塞，不然App就会出现卡顿，所以我们一般都把业务逻辑处理放在后台线程进行。在RxJava中，你可以通过subscribeOn()来指定Observer的运行线程，通过observeOn()指定Subscriber的运行线程。这两个方法都是operator，因此它们可以像所有operator那样作用于任何的Observable。比如上面的例子，我们可以把JSON解析放在后台线程，然后在Main Thread中更新用户信息：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Observable.just(json)
        .map(json -&amp;gt; User.constructionFrom(json))
        .subscribeOn(Schedulers.io())
        .observeOn(AndroidSchedulers.mainThread())     /* 这里用了RxAndroid */
        .subscribe(args -&amp;gt; adapter.setDataSet(args));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;值得注意的是RxJava自带的&lt;code&gt;Schedulers.io&lt;/code&gt;和&lt;code&gt;Schedulers.compute&lt;/code&gt;两种异步多线程Scheduler开启的线程的级别都是与Main Thread一样的，这样后台线程占用的资源大的话，主线程还是会卡的，所以最好还是自己自定义一个Scheduler。&lt;/p&gt;

&lt;h3 id=&#34;mvp&#34;&gt;MVP&lt;/h3&gt;

&lt;p&gt;RxJava中的Observable、Operators和Subcribers是各自独立的，所以我们可以很容易的针对不同场景复用不同部分的代码。&lt;/p&gt;

&lt;p&gt;下面就是自己写的一个Demo中显示系统所有APP INFO的代码(Kotlin)的简单示范：&lt;/p&gt;

&lt;p&gt;Model层，负责获取系统内安装的所有App数据:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;interface AvailableAppModel {
    fun data(): Observable&amp;lt;List&amp;lt;AppInfo&amp;gt;&amp;gt;
}

class AvailableAppModelImpl(val ctx: Context) : AvailableAppModel {

    override fun data(): Observable&amp;lt;List&amp;lt;AppInfo&amp;gt;&amp;gt; {
        return Observable.create { subscriber -&amp;gt;
            val packs = ctx.packageManager.getInstalledPackages(PackageManager.GET_ACTIVITIES)
            val apps = ArrayList&amp;lt;AppInfo&amp;gt;()
            for (pack in packs) {
                if (pack.applicationInfo.flags and ApplicationInfo.FLAG_SYSTEM == 0) {
                    apps.add(genAppInfo(ctx, pack))
                }
            }
            subscriber.onNext(apps)
            subscriber.onCompleted()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Presenter层，负责传递数据到View层，而传递用的就是RxJava，其中Model层的数据请求放在后台线程执行:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;interface AvailableAppPresenter {
    fun bindView(view: AvailableAppView)
    fun bindModel(model: AvailableAppModel)
    fun init(args: Bundle?)
}

class AvailableAppPresenterImpl(val ctx: Context) : AvailableAppPresenter {
    private var appView: AvailableAppView? = null
    private var appModel: AvailableAppModel? = null

    override fun bindView(view: AvailableAppView) {
        appView = view
    }

    override fun bindModel(model: AvailableAppModel) {
        appModel = model
    }

    override fun init(args: Bundle?) {
        appModel!!.data()
                .subscribeOn(AndroidRxPlugin.workerThread)
                .observeOn(AndroidRxPlugin.mainThread)
                .subscribe(appView!!.renderData())    /* 只有订阅了Subscriber才执行获取数据请求 */
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View层:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;public class MainActivity : AppCompatActivity(), AvailableAppView {

    val rvApps: RecyclerView by bindViewById(R.id.rv_apps)
    var adapter: AppAdapter? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        rvApps.layoutManager = LinearLayoutManager(this)
        adapter = AppAdapter(this)
        rvApps.adapter = adapter

        val presenter = AvailableAppPresenterImpl(this)
        val model = AvailableAppModelImpl(this)
        presenter.bindView(this)
        presenter.bindModel(model)
        presenter.init(savedInstanceState)
    }

    override fun renderData(): Subscriber&amp;lt;List&amp;lt;AppInfo&amp;gt;&amp;gt; = Subscribers.create { l -&amp;gt; adapter!!.applist = l }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;总体来说，RxJava是非常不错的，响应式编程的概念的引入起码解决了Android回调不美观的问题。不过响应式编程和函数式编程的概念可能一时比较难接受，还需要段时间来适应。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用Kotlin编写Android应用</title>
      <link>http://kescoode.com/use-kotlin-in-android/</link>
      <pubDate>Wed, 26 Aug 2015 17:16:13 +0800</pubDate>
      
      <guid>http://kescoode.com/use-kotlin-in-android/</guid>
      <description>

&lt;p&gt;最近，Kotlin在外面比较火，外面的呼声也很大。我也是今年4月份看到Jake Wharton的这篇&lt;a href=&#34;https://docs.google.com/document/d/1ReS3ep-hjxWA8kZi0YqDbEhCqTt29hG8P44aA9W0DM8/edit?hl=zh-CN&amp;amp;forcehl=1&#34;&gt;文章&lt;/a&gt;后才开始关注的。后来，因为工作项目中，引用了ikew0ng巨巨的&lt;a href=&#34;https://github.com/ikew0ng/SwipeBackLayout&#34;&gt;SwipBackLayout&lt;/a&gt;拖拽关闭页面库，而作者本人又不继续维护了，所以我试着用Kotlin参考&lt;a href=&#34;https://github.com/ikew0ng/SwipeBackLayout&#34;&gt;SwipBackLayout&lt;/a&gt;，自己撸了一个轮子&lt;a href=&#34;https://github.com/kesco/SlideBack&#34;&gt;SlideBack&lt;/a&gt;，发现用Kotlin来开发Android还是比较舒服的。&lt;/p&gt;

&lt;p&gt;最近，开发团队内技术分享，我做了个简单的&lt;a href=&#34;http://kesco.github.io/kotlin_intrudction&#34;&gt;PPT&lt;/a&gt;，就是简单介绍下Kotlin的。&lt;/p&gt;

&lt;h2 id=&#34;语法&#34;&gt;语法&lt;/h2&gt;

&lt;p&gt;Kotlin的语法非常简洁，熟悉Java的开发者可以快速上手。而且JetBrain系的IDE上还可以一键把已有的Java代码转换成Kotlin代码(不得不说一键傻瓜式操作系列真的非常人性化=_=)，有点像Groovy，开发者可以一开始以Java的风格写Kotlin代码，然后慢慢转成Kotlin自己的风格。详细的语法可参考&lt;a href=&#34;http://kotlinlang.org/docs/reference/&#34;&gt;Kotlin官方教程&lt;/a&gt;，这里做个简短介绍。&lt;/p&gt;

&lt;h3 id=&#34;声明对象&#34;&gt;声明对象&lt;/h3&gt;

&lt;p&gt;Kotlin的一切变量都是对象，所以没有Java那样的基本类型。Kotlin声明对象有两种类型：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;可变对象&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var x = 5                       // 类型推断为`Int`型
var b: String = &amp;quot;Hello&amp;quot;         // String型
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;不可变对象，Kotlin没有final关键字，而且不存在静态变量&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val x = 5                       // 不可变`Int`型变量
x += 1                          // 编译器会报错
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从代码片段可以看出，Kotlin不需要在每行结束加分号。&lt;/p&gt;

&lt;h3 id=&#34;区分非空类型&#34;&gt;区分非空类型&lt;/h3&gt;

&lt;p&gt;在Kotlin中，nullable对象和nullable对象是严格区分的，甚至在编译期解决了不少潜在的空指针问题。声明变量时，对变量的类型都是默认非空的，如果要允许变量为空，必须在定义类型后面加个&lt;code&gt;?&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var a: String = &amp;quot;hello&amp;quot;         // a字符串不可为空
var b: String? = &amp;quot;hello&amp;quot;        // b字符串可以为空
a = null                        // 编译器会报错
b = null                        // OK!!!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而且，在对有可能为空的对象进行操作时，编译器会提示Warning。同时，Kotlin提供类似Ruby和CoffeeScript的语法糖：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var b: String? = &amp;quot;hellp&amp;quot;
b?.length()                     // 如果b不为空对象，则取b的长度
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;智能类型转换&#34;&gt;智能类型转换&lt;/h3&gt;

&lt;p&gt;在Kotlin中，进行强制类型转换可以使用&lt;code&gt;as&lt;/code&gt;关键字，但有可能会抛出异常：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;if (c is String) {              // Kotlin使用`is`关键字判断对象类型
    c.length()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在上面的例子中，如果&lt;code&gt;c&lt;/code&gt;是一个String对象，则在if块中，可以直接使用String的方法，编译器会智能的帮你识别出c在if-blcok里面是一个String对象。&lt;/p&gt;

&lt;p&gt;Kotlin也提供一个&amp;rdquo;安全&amp;rdquo;的类型转换方式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val d: String? = c as String?
/* 或者 */
val d: String? = c as? String
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;流程控制&#34;&gt;流程控制&lt;/h3&gt;

&lt;h4 id=&#34;if&#34;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Kotlin的&lt;code&gt;if&lt;/code&gt;表达式与Java的一样，只是Kotlin中没有三目表达式，所以&lt;code&gt;if&lt;/code&gt;和&lt;code&gt;else&lt;/code&gt;可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val a = 1
val b = 2
val max = if (a &amp;gt; b) a else b   // 类似Java的: int max = a &amp;gt; b?a:b;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;when&#34;&gt;&lt;code&gt;when&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Kotlin用&lt;code&gt;When&lt;/code&gt;表达式来替代Java的&lt;code&gt;Switch&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;when (x) {
  1 -&amp;gt; print(&amp;quot;x == 1&amp;quot;)
  2 -&amp;gt; print(&amp;quot;x == 2&amp;quot;)
  else -&amp;gt; { // Note the block
    print(&amp;quot;x is neither 1 nor 2&amp;quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;for&#34;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Kotlin的&lt;code&gt;for&lt;/code&gt;表达式和Java的&lt;code&gt;foreach&lt;/code&gt;一致。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;for (i in array.indices)
  print(array[i])
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;while&#34;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;while&lt;/code&gt;表达式和Java的一样。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;while (x &amp;gt; 0) {
  x--
}

do {
  val y = retrieveData()
} while (y != null)     // 与Java不同
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;函数&#34;&gt;函数&lt;/h3&gt;

&lt;p&gt;与Java不同的是，Kotlin的函数是一等成员，不需要在类内定义，是可以脱离类存在的，而且Kotlin是不支持类静态方法的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun hello():Unit {      
    print(&amp;quot;hello&amp;quot;)
}

fun add(a: Int, b: Int):Int{
    return a + b
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kotlin没有void关键字，函数都是要返回对象的，所以如果没东西返回的时候，函数后要声明Unit类型(M10版本之后就默认不需要了)。&lt;/p&gt;

&lt;p&gt;如果函数比较简单可以放在一行的话，甚至可以这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun add(a: Int, b: Int) = a + b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这种情况下，函数默认返回最后计算的结果。&lt;/p&gt;

&lt;h4 id=&#34;扩展类的函数&#34;&gt;扩展类的函数&lt;/h4&gt;

&lt;p&gt;通常开发中，我们往往要对提供的API类进行扩展，增加一些方法，如果是Java的话，要想这样做，则声明一个继承该API的子类。Kotlin采取了C#的办法，可以直接扩展类的方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun Fragment.findViewById(id: Int) = this.getView.findViewById(id)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从而不需要衍生出一堆子类或者辅助工具类。&lt;/p&gt;

&lt;p&gt;那么问题来了，如果扩展的类里面本来就有这个同名方法，但类对象调用这个同名方法的时会出现什么情况呢？答案是： 如果类里面就有这个方法，Kotlin就会调用原来的方法，而不调用扩展方法。&lt;/p&gt;

&lt;p&gt;利用这个特性，Kotlin的扩展函数可以提供旧版本API兼容。比如自Android API 16之后，View提供了&lt;code&gt;setBackground&lt;/code&gt;方法，原来的&lt;code&gt;setBackgroundDrawable&lt;/code&gt;则被标记为过时的了，如果要在旧Android手机上使用该API，我们可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun View.setBackground(background: Drawable) = this.setBackgroundDrawable(background:)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，在旧的手机上，APP就可以用自定义的&lt;code&gt;setBackground&lt;/code&gt;的Wrapper，而在高版本的手机上APP会调用原生的&lt;code&gt;setBackground&lt;/code&gt;方法。&lt;/p&gt;

&lt;h4 id=&#34;lambda表达式&#34;&gt;Lambda表达式&lt;/h4&gt;

&lt;p&gt;Kotlin引入了Lambda表达式，而且Kotlin的Lambda表达式支持Android平台：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;view.setOnClickListener({ toast(&amp;quot;Hello world!&amp;quot;) })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，我们就可以不用写那么多监听器对象了。
]&lt;/p&gt;

&lt;h3 id=&#34;类&#34;&gt;类&lt;/h3&gt;

&lt;p&gt;Kotlin的类是这样声明的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class User(val id: Int,val name: String) { // 只有一个构造方法是，可以这样声明
    init {
        print(&amp;quot;Constructor $id : $name&amp;quot;)
    }
    // Nothing   
}

val user = User(1, &amp;quot;Kesco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从上面代码片段可以看出，Kotlin在调用构建方法时，会先调用&lt;code&gt;init&lt;/code&gt;代码块内的代码，而且构建类对象的时候，是不需要&lt;code&gt;new&lt;/code&gt;关键字的。&lt;/p&gt;

&lt;p&gt;那么，如果有多个构造方法怎么办呢？在Kotlin的类内，构造方法名都是规定为&lt;code&gt;constructor&lt;/code&gt;的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class User { // 只有一个构造方法是，可以这样声明
    var _id: Int = 0
    var _name: String = &amp;quot;&amp;quot;

    constructor(id: Int, name: String) {
        _id = id
        _name = name
    }

    constructor(name: String): this(0, name) {
    }

    init {
        print(&amp;quot;Constructor $id : $name&amp;quot;)
    }
    // Nothing   
}

val user = User(1, &amp;quot;Kesco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kotlin的类默认是final的，也就是不可继承，如果让类可继承，则要带有&lt;code&gt;open&lt;/code&gt;关键字声明：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;open class User(val id: Int, val name: String) {
    // Nothing
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;虚类Kotlin与Java一样，都是用&lt;code&gt;abstract&lt;/code&gt;关键字声明，当有&lt;code&gt;abstract&lt;/code&gt;关键字的时候，就不需要带有&lt;code&gt;open&lt;/code&gt;了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;abstract class User() {
    // Nothing
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;getter和setter&#34;&gt;Getter和Setter&lt;/h4&gt;

&lt;p&gt;Kotlin的Setter和Getter编码风格与C#类似：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class User {
    private var _id: Int
    var id: Int
        get() = _id
        set(value) {
            _id = value
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;data-class&#34;&gt;Data Class&lt;/h4&gt;

&lt;p&gt;Kotlin的类可以申明&lt;code&gt;data&lt;/code&gt;关键字，相当与专用与存储数据的Pojo类：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;data class User(val id: Int = 0, val name: String = &amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而且Data Class可以进行这样的操作：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val jane = User(1, &amp;quot;Jane&amp;quot;)
val (id, name) = jane
println(&amp;quot;$name id is $id&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;内部类&#34;&gt;内部类&lt;/h4&gt;

&lt;p&gt;Kotlin同样支持内部类，但是Kotlin的内部类是默认不带有外部类的引用的，也就是说默认的Kotlin内部类都是静态的。要想内部类带有外部类的引用，要在内部类声明上加入&lt;code&gt;inner&lt;/code&gt;关键字：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class User(val id:Int, val name: String) {
    inner class School(val name: String) {
        // Nothing
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;接口&#34;&gt;接口&lt;/h3&gt;

&lt;p&gt;Kotlin的接口和Java的类似，而且还支持Java 8的默认方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;interface MyInterface {
    fun bar()
    fun foo() {
        print(&amp;quot;foo&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;android工程中配置kotlin&#34;&gt;Android工程中配置Kotlin&lt;/h2&gt;

&lt;p&gt;在Android项目中使用Kotlin非常简单，而且Kotlin可以和Java混编，所以完全部分功能用Kotlin开发，部分功能用Java开发。&lt;/p&gt;

&lt;p&gt;首先，确保Android Studio或者Intellij Idea安装了Kotlin插件。&lt;/p&gt;

&lt;p&gt;然后，在项目Module的&lt;code&gt;build.gradle&lt;/code&gt;上声明：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;apply plugin: &#39;kotlin-android&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着，添加Kotlin依赖：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {
    compile &#39;org.jetbrains.kotlin:kotlin-stdlib:0.1-SNAPSHOT&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，添加Kotlin源码文件夹即可：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;android {

    ...

    sourceSets {
        main.java.srcDirs += &#39;src/main/kotlin&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Android下的任务与Activity栈</title>
      <link>http://kescoode.com/android-task-and-stack/</link>
      <pubDate>Mon, 04 Nov 2013 20:28:15 +0800</pubDate>
      
      <guid>http://kescoode.com/android-task-and-stack/</guid>
      <description>

&lt;p&gt;我们都知道，通过Intent启动Activity有两种形式:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;显式的指向某个Activity&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  Intent intent = new Intent(this, Activity1.class);
  startActivity(intent); 
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;隐式的通过设置Intent的动作启动Activity&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  Intent intent = new Intent(Intent.ACTION_VIEW);
  intent.setData(Uri.parse(&amp;quot;http://www.google.com&amp;quot;));
  startActivity(intent);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Activty是Android四大组件中负责与用户交互的部件，Activity承担了大量的显示和交互工作，从某种角度上将，我们看见的应用程序就是许多个Activity的组合。&lt;/p&gt;

&lt;h2 id=&#34;task-stack&#34;&gt;Task Stack&lt;/h2&gt;

&lt;p&gt;为了让这许多Activity协同工作而不至于产生混乱，Android平台设计了一种堆栈机制用于管理Activity，其遵循先进后出的原则，系统总是显示位于栈顶的Activity，从逻辑上将，位于栈顶的Activity也就是最后打开的Activity，这也是符合逻辑的。这个栈也可以叫做Task Stack，因为一个Task Stack里的Activity是可以属于不同的Application的。例如：你想在发送短信时，拍一张照并作为彩信发出去，这时你首先停留在短信应用程序的的Acitivity上，然后跳转到Camera应用程序的Activity上，当完成拍照功能后，再返回到短信应用程序的Activity。这实际上是两个Android Application协同合作后完成的工作，但为了更好的用户体验，Android平台加入了Task这么一种机制，让用户没有感觉到应用的中断，让用户感觉在一“应用程序”里就完成了想完成的工作。&lt;/p&gt;

&lt;p&gt;通过下图可以更清晰的理解Application、task、Activity三者之间的关系：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kescoode.qiniudn.com/android-activity-task-0.png&#34; alt=&#34;Application-task-Activity&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;值得注意点的时候，一个系统里可以有很多的Task Stack，当后台的Task过多的时候，系统可能会去除栈底的Activity，释放多余的内存。&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;保存activity状态&#34;&gt;保存Activity状态&lt;/h2&gt;

&lt;p&gt;当Task Stack中的Activity返回前台的时候，可能已经是被系统释放点重新创建的，为了用户的操纵信息得到保留，我们最好重写&lt;a href=&#34;http://developer.android.com/reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle)&#34;&gt;onSaveInstanceState()&lt;/a&gt;方法。&lt;/p&gt;

&lt;h2 id=&#34;managing-tasks&#34;&gt;Managing Tasks&lt;/h2&gt;

&lt;p&gt;我们在平常写程序的时候，Activity的启动方式保持默认就已经够用了。但是遇到特定场合，我们可以通过对启动方式的更改来修改Activity在Task中的运行状态。&lt;/p&gt;

&lt;p&gt;Activity的启动状态我们可以在AndroidManifest.XML中定义，抑或直接通过Intent传相应的数值对。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;操作manifest文件，Activity状态设置是其节点launchMode属性定义，共有四种形式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&amp;ldquo;standard&amp;rdquo;&lt;br /&gt;
默认方式，Activity可以创建多次，分布在不同的Task Stack中，有相应不同的实体。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;singleTop&amp;rdquo;&lt;br /&gt;
通过此方法启动的Activity如果在栈顶的话，当再次收到启动的Intent，将不会再创建新实例，而是直接执行&lt;a href=&#34;http://developer.android.com/reference/android/app/Activity.html#onNewIntent(android.content.Intent)&#34;&gt;onNewIntent()&lt;/a&gt;方法。Activity可以有多个实例，在每个Task Stack中除非不在栈顶，在接受到启动的Intent的时候都不会创建新实例。&lt;br /&gt;
比如一个Task Stack:A-&amp;gt;B-&amp;gt;C-&amp;gt;D，如果是Standard模式，当收到D的启动Intent时，Stack:A-&amp;gt;B-&amp;gt;C-&amp;gt;D-&amp;gt;D，如果是SingleTop模式,Stack:A-&amp;gt;B-&amp;gt;C-&amp;gt;D。而当收到的是B的启动Itent时，Stack:A-&amp;gt;B-&amp;gt;C-&amp;gt;D-&amp;gt;B,因为B不在栈顶。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;singleTask&amp;rdquo;&lt;br /&gt;
这种模式下，Activity只能存在一个实例，当再次收到启动的Intent时，直接执行&lt;a href=&#34;http://developer.android.com/reference/android/app/Activity.html#onNewIntent(android.content.Intent)&#34;&gt;onNewIntent()&lt;/a&gt;方法。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;singleInstance&amp;rdquo;
类似于singleTask，不同的地方是，Activity只能有一个实例，而且该实例的Task Stack只能有这个Activity，也就是说通过该模式启动的Activity在Task Stack中即是栈顶也是栈底。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Intent通过setFlags或者addFlags方法添加数值对，默认方式是不用做任何操作的，除此之外还有三种形式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;FLAG_ACTIVITY_NEW_TASK
启动一个新的Task Stack，当包括Activity的Task已经存在的时候，这个Task将会直接在前台显示，类似与singleTask。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;FLAG_ACTIVITY_SINGLE_TOP
当这个Intent启动的前台的Activity，将不会创建新实例，而是直接执行&lt;a href=&#34;http://developer.android.com/reference/android/app/Activity.html#onNewIntent(android.content.Intent)&#34;&gt;onNewIntent()&lt;/a&gt;，类似于singleTop。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;FLAG_ACTIVITY_CLEAR_TOP
如果启动的Activity在Task Stack中，其余的Activity都会被弹出释放，不会创建新实例，而是执行&lt;a href=&#34;http://developer.android.com/reference/android/app/Activity.html#onNewIntent(android.content.Intent)&#34;&gt;onNewIntent()&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>