<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Kesco的编码世界</title>
    <link>http://kescoode.com/tags/javascript/index.xml</link>
    <description>Recent content in Javascript on Kesco的编码世界</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2017. All rights reserved.</copyright>
    <atom:link href="http://kescoode.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JQuery异步编程</title>
      <link>http://kescoode.com/javascript-async-program/</link>
      <pubDate>Sun, 02 Mar 2014 20:48:00 +0800</pubDate>
      
      <guid>http://kescoode.com/javascript-async-program/</guid>
      <description>

&lt;p&gt;JavaScript异步编程通常的方法是指定一个回调函数，当操作结束之后，自动执行回调函数。但是这样有个不好的一点，也就是容易造成回调函数嵌套，比如下面一个搞笑的情况：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;              ......
			   ......
                ......
                           }
                         }
                       }
                     }
                   }
                 }
               }
......
......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了避免这种情况的出现，业界现在有几种编程范式。如CommonJS提出的Promise模式，就是个不错的解决方案。jQuery的deferred对象就是jQuery的Promise范式回调函数解决方案。&lt;/p&gt;

&lt;h2 id=&#34;deferred对象与传统回调函数的对比&#34;&gt;deferred对象与传统回调函数的对比&lt;/h2&gt;

&lt;p&gt;这里用AJAX请求做示列，传统写法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$.ajax({
　　　　url: &amp;quot;test.html&amp;quot;,
　　　　success: function(){
　　　　　　alert(&amp;quot;哈哈，成功了！&amp;quot;);
　　　　},
　　　　error:function(){
　　　　　　alert(&amp;quot;出错啦！&amp;quot;);
　　　　}
　　});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;deferred对象写法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$.ajax(&amp;quot;test.html&amp;quot;)
　　.done(function(){ alert(&amp;quot;哈哈，成功了！&amp;quot;); })
　　.fail(function(){ alert(&amp;quot;出错啦！&amp;quot;); });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里，实际上&lt;code&gt;.done&lt;/code&gt;方法相当与&lt;code&gt;success&lt;/code&gt;方法，&lt;code&gt;.fail&lt;/code&gt;方法相当于&lt;code&gt;error&lt;/code&gt;方法。从这里可以看出，deferred对象对于整个代码结构来说会更清晰明了，同时更可以采用链式写法，&lt;code&gt;$.ajax(&#39;test.html&#39;).done(...).fail(...).done(...)&lt;/code&gt;，操作起来是非常方便的。&lt;/p&gt;

&lt;h2 id=&#34;同时为多个异步操作指定回调函数&#34;&gt;同时为多个异步操作指定回调函数&lt;/h2&gt;

&lt;p&gt;jQuery提供&lt;code&gt;$.when&lt;/code&gt;方法来为多个事件指定一个回调函数，写法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$.when($.ajax(&amp;quot;test1.html&amp;quot;), $.ajax(&amp;quot;test2.html&amp;quot;))
　　.done(function(){ alert(&amp;quot;哈哈，成功了！&amp;quot;); })
　　.fail(function(){ alert(&amp;quot;出错啦！&amp;quot;); });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当两个请求都成功后会执行&lt;code&gt;.done&lt;/code&gt;方法，失败则会执行&lt;code&gt;.fail&lt;/code&gt;方法，实际上，&lt;code&gt;$.when&lt;/code&gt;返回的就是一个deferred对象。&lt;/p&gt;

&lt;h2 id=&#34;deferred对象方法&#34;&gt;Deferred对象方法&lt;/h2&gt;

&lt;p&gt;初步了解deferred对象的操作后，我们可以看下deferred包含的一些方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$.Deferred&lt;/code&gt;生成一个deferred对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deferred.done&lt;/code&gt;指定操作成功时的回调函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deferred.fail&lt;/code&gt;指定操作失败时的回调函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deferred.promise&lt;/code&gt;没有参数时，返回一个新的deferred对象，该对象的运行状态无法被改变；接受参数时，作用为在参数对象上部署deferred接口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deferred.resolve&lt;/code&gt;手动改变deferred对象的运行状态为&amp;rdquo;已完成&amp;rdquo;，从而立即触发&lt;code&gt;.done&lt;/code&gt;方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deferred.reject&lt;/code&gt;这个方法与&lt;code&gt;deferred.resolve&lt;/code&gt;正好相反，调用后将deferred对象的运行状态变为&amp;rdquo;已失败&amp;rdquo;，从而立即触发&lt;code&gt;.fail&lt;/code&gt;方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$.when&lt;/code&gt;为多个操作指定回调函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deferred.then&lt;/code&gt;有时为了省事，可以把&lt;code&gt;.done&lt;/code&gt;和&lt;code&gt;.fail&lt;/code&gt;合在一起写，这就是&lt;code&gt;.then&lt;/code&gt;方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deferred.always&lt;/code&gt;这个方法也是用来指定回调函数的，它的作用是，不管调用的是&lt;code&gt;deferred.resolve&lt;/code&gt;还是&lt;code&gt;deferred.reject&lt;/code&gt;，最后总是执行。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;自定义的回调函数&#34;&gt;自定义的回调函数&lt;/h2&gt;

&lt;p&gt;有了上面的deferred方法后，我们可以这样定义自己的异步操作：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var wait = function(dtd){
　　　　var dtd = $.Deferred(); //在函数内部，新建一个Deferred对象
　　　　var tasks = function(){
　　　　　　alert(&amp;quot;执行完毕！&amp;quot;);
　　　　　　dtd.resolve(); // 改变Deferred对象的执行状态
　　　　};

　　　　setTimeout(tasks,5000);
　　　　return dtd.promise(); // 返回promise对象
　　};
　　$.when(wait())
　　.done(function(){ alert(&amp;quot;哈哈，成功了！&amp;quot;); })
　　.fail(function(){ alert(&amp;quot;出错啦！&amp;quot;); });
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>