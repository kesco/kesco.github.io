<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on Kesco的编码世界</title>
    <link>http://kescoode.com/tags/github/index.xml</link>
    <description>Recent content in Github on Kesco的编码世界</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <atom:link href="http://kescoode.com/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>用Travis CI给Android项目部署Github Release</title>
      <link>http://kescoode.com/travis-ci-android-github-release/</link>
      <pubDate>Thu, 15 Oct 2015 14:29:53 +0800</pubDate>
      
      <guid>http://kescoode.com/travis-ci-android-github-release/</guid>
      <description>

&lt;p&gt;时至今日，互联网软件的开发和发布，已经形成了一套标准流程，其中一个重要部分就是持续集成(CI)。&lt;/p&gt;

&lt;p&gt;平时我工作中CI用得比较多的地方是按照git tag做应用渠道分发打包。最近写了一个拖拽手势Xposed插件&lt;a href=&#34;https://github.com/kesco/SlideBack-Xposed&#34;&gt;SlideBack-Xposed&lt;/a&gt;，除了&lt;a href=&#34;http://repo.xposed.info/module/com.kesco.xposed.slideback&#34;&gt;Xposed Module Repo&lt;/a&gt;外，我需要一个提供APK对外下载的地方。由于Google Play审核机制收紧了，单纯Xposed插件收录比较麻烦，而我又不想放到国内渠道上，于是我把注意力放到Github Release上。&lt;/p&gt;

&lt;p&gt;Github Release是Github推出的一个帮助开发者发布Repo最终软件包给用户的功能。Github Release是根据其Repo的Git标签来排序的，而且目前Github还没有限制Github Release的存储大小，不需担心空间不够用，所以一般情况下，已经可以了。同时，我们利用Travis CI来自动根据我们打的Git Tag来构建APK并Push到自己的Github Release上。&lt;/p&gt;

&lt;h2 id=&#34;启用travis-ci&#34;&gt;启用Travis CI&lt;/h2&gt;

&lt;p&gt;Travis CI是比较流行的开源持续构建平台，与Github结合比较紧密，对Github上的开源Repo是免费的，私有Repo收费（Circle CI也不错，而且对Github私有Repo也是免费的）。我们首先在Travis CI上打开对自己项目的Hook开关，那么当你每次Commit Push的时候，CI就会自动运行了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7mnom1.com1.z0.glb.clouddn.com/travis-enable-project.png&#34; alt=&#34;travis-enable-project&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;基础构建脚本&#34;&gt;基础构建脚本&lt;/h2&gt;

&lt;p&gt;Travis CI使用YAML文件作为构建脚本，以最简单Android项目构建APK为例，只需在项目根目录创建&lt;code&gt;.travis.yml&lt;/code&gt;文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: android
android:
  components:
    - build-tools-22.0.1
    - android-23
    - extra-android-m2repository
    - extra-android-support
script:
  - ./gradlew assembleRelease
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后&lt;code&gt;git add . &amp;amp;&amp;amp; git commit &amp;amp;&amp;amp; git push&lt;/code&gt;即可。这里解释下，&lt;code&gt;.travis.yml&lt;/code&gt;几个关键的Tag：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;因为Repo是Android项目，所以构建语言&lt;code&gt;language&lt;/code&gt;选择&lt;code&gt;android&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;选择了Android项目后，就在&lt;code&gt;android&lt;/code&gt;中的&lt;code&gt;components&lt;/code&gt;的tag中设置Android项目需要的依赖。&lt;/li&gt;
&lt;li&gt;Travis CI编译Android实际上也是调用项目中的构建脚本的。现在大部分Android项目都是用Gradle构建的，如果是要打Release版本的APK包，在&lt;code&gt;script&lt;/code&gt;加入&lt;code&gt;./gradlew assembleRelease&lt;/code&gt;就行了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不过，实际上，单纯在CI上面打包，其实是没什么用处的，因为Travis CI每次任务完成之后，就会把所有生成的文件清掉，所以我们要把生成的APK传到Github Release上。&lt;/p&gt;

&lt;h2 id=&#34;发布github-release&#34;&gt;发布Github Release&lt;/h2&gt;

&lt;p&gt;Travis CI默认支持发布到Github Release上，不需要配置别的脚本，相应的&lt;code&gt;YAML&lt;/code&gt;配置Tag是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;deploy:
  provider: releases
  api_key: &amp;quot;GITHUB OAUTH TOKEN&amp;quot;
  file: &amp;quot;FILE TO UPLOAD&amp;quot;
  skip_cleanup: true
  on:
    tags: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;值得注意的一点就是&lt;code&gt;skip_cleanup&lt;/code&gt;这个Tag要设置为&lt;code&gt;True&lt;/code&gt;，不这样做的话，Travis CI在部署之前就会清空生成的APK文件，那样你就什么都得不到了。&lt;code&gt;api_key&lt;/code&gt;是部署到Github Release的凭证，需要开发者自己生成。如果不想那么麻烦的话，可以使用Travis CI提供的&lt;code&gt;travis&lt;/code&gt;命令行工具。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;travis&lt;/code&gt;是用Ruby写的，安装需要系统配有Ruby 1.9以上版本：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install travis -v 1.8.0 --no-rdoc --no-ri
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完成后，在根目录执行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;travis setup releases
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按照相应的提示，就可以生成相应的部署配置了。完整的&lt;code&gt;.travis.yml&lt;/code&gt;文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: android
android:
  components:
    - build-tools-22.0.1
    - android-23
    - extra-android-m2repository
    - extra-android-support
script:
  - ./gradlew assembleRelease
deploy:
  provider: releases
  api_key:
    secure: [生成的token]
  file: app/build/outputs/apk/app-release.apk
  skip_cleanup: true
  on:
    tags: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，以后在你Repo打git tag并把它Push到Github上后，Travis CI就会自动帮你构建一个Github Release了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7mnom1.com1.z0.glb.clouddn.com/slideback-github-release.png&#34; alt=&#34;slideback-github-release&#34; /&gt;&lt;/p&gt;

&lt;p&gt;等等，难道这样就结束了吗？当然不了，这只是单纯把APK发送到Github Release上去。但是构建APK过程中还有很多问题，比如你在CI构建Release版本的APK的时候，要用到自己签名的密钥，对吧。我们当然不能把密钥的信息公开，那么该怎么做呢？&lt;/p&gt;

&lt;h2 id=&#34;隐藏签名密钥信息&#34;&gt;隐藏签名密钥信息&lt;/h2&gt;

&lt;p&gt;Travis CI是通过Android项目中的build.gradle的信息来构建apk的，自然我们通过配置build.gradle脚本来签名apk也是很正常的事。但是在公开项目中暴露签名密钥信息是不安全的，有个简单的方法是，让gradle在CI构建的时候从CI的环境变量中读取密钥信息，这样可以降低点风险。&lt;/p&gt;

&lt;p&gt;首先，我们先在&lt;code&gt;build.gradle&lt;/code&gt;配置签名选项文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;android {
    signingConfigs {
        release {
            storeFile file(&amp;quot;.kesco.keystore&amp;quot;)
            storePassword System.getenv(&amp;quot;KEYSTORE_PASS&amp;quot;)
            keyAlias System.getenv(&amp;quot;ALIAS_NAME&amp;quot;)
            keyPassword System.getenv(&amp;quot;ALIAS_PASS&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;像这样的话，gradle在签名的时候会自动从系统读取&lt;code&gt;KEYSTORE_PASS&lt;/code&gt;、&lt;code&gt;ALIAS_NAME&lt;/code&gt;和&lt;code&gt;ALIAS_PASS&lt;/code&gt;三个环境变量。&lt;/p&gt;

&lt;p&gt;然后我们在Travis CI上设置&lt;code&gt;KEYSTORE_PASS&lt;/code&gt;、&lt;code&gt;ALIAS_NAME&lt;/code&gt;和&lt;code&gt;ALIAS_PASS&lt;/code&gt;这三个环境变量：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7mnom1.com1.z0.glb.clouddn.com/travis-env.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;另外，Travis CI在构建Android项目时，默认使用Oracle JDK，但是当我设置CI的环境变量后，构建会报错，所以就把JDK换为OpenJDK了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jdk: openjdk7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果还想更保密点的话，可以将签名密钥keystore文件加密一下，等CI启动的时候再解密，这样会安全些。&lt;/p&gt;

&lt;p&gt;以上就是我折腾&lt;a href=&#34;https://github.com/kesco/SlideBack-Xposed&#34;&gt;SlideBack-Xposed&lt;/a&gt;项目时总结出来的经验，下面是我项目中完整的&lt;code&gt;.travis.yml&lt;/code&gt;文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: android
jdk: openjdk7
android:
  components:
    - build-tools-22.0.1
    - android-23
    - extra-android-m2repository
    - extra-android-support
git:
  submodules: false
before_install:
  - sed -i &#39;s/git@github.com:/https:\/\/github.com\//&#39; .gitmodules
  - git submodule init &amp;amp;&amp;amp; git submodule update
script:
  - ./gradlew assembleRelease
before_deploy:
  - mv app/build/outputs/apk/app-release.apk app/build/outputs/apk/slideback.apk
deploy:
  provider: releases
  api_key:
    secure: [Github Token]
  file: app/build/outputs/apk/slideback.apk
  skip_cleanup: true
  on:
    tags: true
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>