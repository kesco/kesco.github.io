<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlin on Kesco的编码世界</title>
    <link>http://kescoode.com/tags/kotlin/index.xml</link>
    <description>Recent content in Kotlin on Kesco的编码世界</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2017. All rights reserved.</copyright>
    <atom:link href="http://kescoode.com/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>用Kotlin编写Android应用</title>
      <link>http://kescoode.com/use-kotlin-in-android/</link>
      <pubDate>Wed, 26 Aug 2015 17:16:13 +0800</pubDate>
      
      <guid>http://kescoode.com/use-kotlin-in-android/</guid>
      <description>

&lt;p&gt;最近，Kotlin在外面比较火，外面的呼声也很大。我也是今年4月份看到Jake Wharton的这篇&lt;a href=&#34;https://docs.google.com/document/d/1ReS3ep-hjxWA8kZi0YqDbEhCqTt29hG8P44aA9W0DM8/edit?hl=zh-CN&amp;amp;forcehl=1&#34;&gt;文章&lt;/a&gt;后才开始关注的。后来，因为工作项目中，引用了ikew0ng巨巨的&lt;a href=&#34;https://github.com/ikew0ng/SwipeBackLayout&#34;&gt;SwipBackLayout&lt;/a&gt;拖拽关闭页面库，而作者本人又不继续维护了，所以我试着用Kotlin参考&lt;a href=&#34;https://github.com/ikew0ng/SwipeBackLayout&#34;&gt;SwipBackLayout&lt;/a&gt;，自己撸了一个轮子&lt;a href=&#34;https://github.com/kesco/SlideBack&#34;&gt;SlideBack&lt;/a&gt;，发现用Kotlin来开发Android还是比较舒服的。&lt;/p&gt;

&lt;p&gt;最近，开发团队内技术分享，我做了个简单的&lt;a href=&#34;http://kesco.github.io/kotlin_intrudction&#34;&gt;PPT&lt;/a&gt;，就是简单介绍下Kotlin的。&lt;/p&gt;

&lt;h2 id=&#34;语法&#34;&gt;语法&lt;/h2&gt;

&lt;p&gt;Kotlin的语法非常简洁，熟悉Java的开发者可以快速上手。而且JetBrain系的IDE上还可以一键把已有的Java代码转换成Kotlin代码(不得不说一键傻瓜式操作系列真的非常人性化=_=)，有点像Groovy，开发者可以一开始以Java的风格写Kotlin代码，然后慢慢转成Kotlin自己的风格。详细的语法可参考&lt;a href=&#34;http://kotlinlang.org/docs/reference/&#34;&gt;Kotlin官方教程&lt;/a&gt;，这里做个简短介绍。&lt;/p&gt;

&lt;h3 id=&#34;声明对象&#34;&gt;声明对象&lt;/h3&gt;

&lt;p&gt;Kotlin的一切变量都是对象，所以没有Java那样的基本类型。Kotlin声明对象有两种类型：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;可变对象&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var x = 5                       // 类型推断为`Int`型
var b: String = &amp;quot;Hello&amp;quot;         // String型
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;不可变对象，Kotlin没有final关键字，而且不存在静态变量&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val x = 5                       // 不可变`Int`型变量
x += 1                          // 编译器会报错
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从代码片段可以看出，Kotlin不需要在每行结束加分号。&lt;/p&gt;

&lt;h3 id=&#34;区分非空类型&#34;&gt;区分非空类型&lt;/h3&gt;

&lt;p&gt;在Kotlin中，nullable对象和nullable对象是严格区分的，甚至在编译期解决了不少潜在的空指针问题。声明变量时，对变量的类型都是默认非空的，如果要允许变量为空，必须在定义类型后面加个&lt;code&gt;?&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var a: String = &amp;quot;hello&amp;quot;         // a字符串不可为空
var b: String? = &amp;quot;hello&amp;quot;        // b字符串可以为空
a = null                        // 编译器会报错
b = null                        // OK!!!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而且，在对有可能为空的对象进行操作时，编译器会提示Warning。同时，Kotlin提供类似Ruby和CoffeeScript的语法糖：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var b: String? = &amp;quot;hellp&amp;quot;
b?.length()                     // 如果b不为空对象，则取b的长度
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;智能类型转换&#34;&gt;智能类型转换&lt;/h3&gt;

&lt;p&gt;在Kotlin中，进行强制类型转换可以使用&lt;code&gt;as&lt;/code&gt;关键字，但有可能会抛出异常：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;if (c is String) {              // Kotlin使用`is`关键字判断对象类型
    c.length()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在上面的例子中，如果&lt;code&gt;c&lt;/code&gt;是一个String对象，则在if块中，可以直接使用String的方法，编译器会智能的帮你识别出c在if-blcok里面是一个String对象。&lt;/p&gt;

&lt;p&gt;Kotlin也提供一个&amp;rdquo;安全&amp;rdquo;的类型转换方式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val d: String? = c as String?
/* 或者 */
val d: String? = c as? String
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;流程控制&#34;&gt;流程控制&lt;/h3&gt;

&lt;h4 id=&#34;if&#34;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Kotlin的&lt;code&gt;if&lt;/code&gt;表达式与Java的一样，只是Kotlin中没有三目表达式，所以&lt;code&gt;if&lt;/code&gt;和&lt;code&gt;else&lt;/code&gt;可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val a = 1
val b = 2
val max = if (a &amp;gt; b) a else b   // 类似Java的: int max = a &amp;gt; b?a:b;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;when&#34;&gt;&lt;code&gt;when&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Kotlin用&lt;code&gt;When&lt;/code&gt;表达式来替代Java的&lt;code&gt;Switch&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;when (x) {
  1 -&amp;gt; print(&amp;quot;x == 1&amp;quot;)
  2 -&amp;gt; print(&amp;quot;x == 2&amp;quot;)
  else -&amp;gt; { // Note the block
    print(&amp;quot;x is neither 1 nor 2&amp;quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;for&#34;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Kotlin的&lt;code&gt;for&lt;/code&gt;表达式和Java的&lt;code&gt;foreach&lt;/code&gt;一致。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;for (i in array.indices)
  print(array[i])
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;while&#34;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;while&lt;/code&gt;表达式和Java的一样。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;while (x &amp;gt; 0) {
  x--
}

do {
  val y = retrieveData()
} while (y != null)     // 与Java不同
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;函数&#34;&gt;函数&lt;/h3&gt;

&lt;p&gt;与Java不同的是，Kotlin的函数是一等成员，不需要在类内定义，是可以脱离类存在的，而且Kotlin是不支持类静态方法的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun hello():Unit {      
    print(&amp;quot;hello&amp;quot;)
}

fun add(a: Int, b: Int):Int{
    return a + b
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kotlin没有void关键字，函数都是要返回对象的，所以如果没东西返回的时候，函数后要声明Unit类型(M10版本之后就默认不需要了)。&lt;/p&gt;

&lt;p&gt;如果函数比较简单可以放在一行的话，甚至可以这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun add(a: Int, b: Int) = a + b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这种情况下，函数默认返回最后计算的结果。&lt;/p&gt;

&lt;h4 id=&#34;扩展类的函数&#34;&gt;扩展类的函数&lt;/h4&gt;

&lt;p&gt;通常开发中，我们往往要对提供的API类进行扩展，增加一些方法，如果是Java的话，要想这样做，则声明一个继承该API的子类。Kotlin采取了C#的办法，可以直接扩展类的方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun Fragment.findViewById(id: Int) = this.getView.findViewById(id)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从而不需要衍生出一堆子类或者辅助工具类。&lt;/p&gt;

&lt;p&gt;那么问题来了，如果扩展的类里面本来就有这个同名方法，但类对象调用这个同名方法的时会出现什么情况呢？答案是： 如果类里面就有这个方法，Kotlin就会调用原来的方法，而不调用扩展方法。&lt;/p&gt;

&lt;p&gt;利用这个特性，Kotlin的扩展函数可以提供旧版本API兼容。比如自Android API 16之后，View提供了&lt;code&gt;setBackground&lt;/code&gt;方法，原来的&lt;code&gt;setBackgroundDrawable&lt;/code&gt;则被标记为过时的了，如果要在旧Android手机上使用该API，我们可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun View.setBackground(background: Drawable) = this.setBackgroundDrawable(background:)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，在旧的手机上，APP就可以用自定义的&lt;code&gt;setBackground&lt;/code&gt;的Wrapper，而在高版本的手机上APP会调用原生的&lt;code&gt;setBackground&lt;/code&gt;方法。&lt;/p&gt;

&lt;h4 id=&#34;lambda表达式&#34;&gt;Lambda表达式&lt;/h4&gt;

&lt;p&gt;Kotlin引入了Lambda表达式，而且Kotlin的Lambda表达式支持Android平台：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;view.setOnClickListener({ toast(&amp;quot;Hello world!&amp;quot;) })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，我们就可以不用写那么多监听器对象了。
]&lt;/p&gt;

&lt;h3 id=&#34;类&#34;&gt;类&lt;/h3&gt;

&lt;p&gt;Kotlin的类是这样声明的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class User(val id: Int,val name: String) { // 只有一个构造方法是，可以这样声明
    init {
        print(&amp;quot;Constructor $id : $name&amp;quot;)
    }
    // Nothing   
}

val user = User(1, &amp;quot;Kesco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从上面代码片段可以看出，Kotlin在调用构建方法时，会先调用&lt;code&gt;init&lt;/code&gt;代码块内的代码，而且构建类对象的时候，是不需要&lt;code&gt;new&lt;/code&gt;关键字的。&lt;/p&gt;

&lt;p&gt;那么，如果有多个构造方法怎么办呢？在Kotlin的类内，构造方法名都是规定为&lt;code&gt;constructor&lt;/code&gt;的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class User { // 只有一个构造方法是，可以这样声明
    var _id: Int = 0
    var _name: String = &amp;quot;&amp;quot;

    constructor(id: Int, name: String) {
        _id = id
        _name = name
    }

    constructor(name: String): this(0, name) {
    }

    init {
        print(&amp;quot;Constructor $id : $name&amp;quot;)
    }
    // Nothing   
}

val user = User(1, &amp;quot;Kesco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kotlin的类默认是final的，也就是不可继承，如果让类可继承，则要带有&lt;code&gt;open&lt;/code&gt;关键字声明：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;open class User(val id: Int, val name: String) {
    // Nothing
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;虚类Kotlin与Java一样，都是用&lt;code&gt;abstract&lt;/code&gt;关键字声明，当有&lt;code&gt;abstract&lt;/code&gt;关键字的时候，就不需要带有&lt;code&gt;open&lt;/code&gt;了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;abstract class User() {
    // Nothing
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;getter和setter&#34;&gt;Getter和Setter&lt;/h4&gt;

&lt;p&gt;Kotlin的Setter和Getter编码风格与C#类似：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class User {
    private var _id: Int
    var id: Int
        get() = _id
        set(value) {
            _id = value
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;data-class&#34;&gt;Data Class&lt;/h4&gt;

&lt;p&gt;Kotlin的类可以申明&lt;code&gt;data&lt;/code&gt;关键字，相当与专用与存储数据的Pojo类：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;data class User(val id: Int = 0, val name: String = &amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而且Data Class可以进行这样的操作：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val jane = User(1, &amp;quot;Jane&amp;quot;)
val (id, name) = jane
println(&amp;quot;$name id is $id&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;内部类&#34;&gt;内部类&lt;/h4&gt;

&lt;p&gt;Kotlin同样支持内部类，但是Kotlin的内部类是默认不带有外部类的引用的，也就是说默认的Kotlin内部类都是静态的。要想内部类带有外部类的引用，要在内部类声明上加入&lt;code&gt;inner&lt;/code&gt;关键字：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class User(val id:Int, val name: String) {
    inner class School(val name: String) {
        // Nothing
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;接口&#34;&gt;接口&lt;/h3&gt;

&lt;p&gt;Kotlin的接口和Java的类似，而且还支持Java 8的默认方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;interface MyInterface {
    fun bar()
    fun foo() {
        print(&amp;quot;foo&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;android工程中配置kotlin&#34;&gt;Android工程中配置Kotlin&lt;/h2&gt;

&lt;p&gt;在Android项目中使用Kotlin非常简单，而且Kotlin可以和Java混编，所以完全部分功能用Kotlin开发，部分功能用Java开发。&lt;/p&gt;

&lt;p&gt;首先，确保Android Studio或者Intellij Idea安装了Kotlin插件。&lt;/p&gt;

&lt;p&gt;然后，在项目Module的&lt;code&gt;build.gradle&lt;/code&gt;上声明：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;apply plugin: &#39;kotlin-android&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着，添加Kotlin依赖：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {
    compile &#39;org.jetbrains.kotlin:kotlin-stdlib:0.1-SNAPSHOT&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，添加Kotlin源码文件夹即可：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;android {

    ...

    sourceSets {
        main.java.srcDirs += &#39;src/main/kotlin&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>